<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Better Tomorrow</title><link>https://j2e4.github.io/</link><description>Recent content on A Better Tomorrow</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Mon, 04 Sep 2023 23:32:13 +0900</lastBuildDate><atom:link href="https://j2e4.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>하나의 CloudFront 도메인으로 두 개의 S3 엔드포인트 호스팅하기</title><link>https://j2e4.github.io/post/hosting-websites-under-one-domain/</link><pubDate>Mon, 04 Sep 2023 23:32:13 +0900</pubDate><guid>https://j2e4.github.io/post/hosting-websites-under-one-domain/</guid><description>아래와 같이 Vue.js로 구현한 애플리케이션과 Next.js로 구현한 애플리케이션을 하나의 도메인으로 호스팅하기 위해 아마존의 CDN 서비스, Amazon CloudFront를 활용한 경험을 공유한다.
이하 각 서비스를 &amp;ldquo;이름&amp;rdquo; 칼럼에 적어둔 값으로 부를 예정이다.
S3 엔드포인트 이름 프레임워크 목적 AS-IS 도메인 경로 TO-BE 도메인 경로 1 서비스 애플리케이션 Vue.js 사용자에게 서비스를 제공 /를 포함한 메뉴별 경로 /를 포함하지 않는 메뉴별 경로 2 랜딩 페이지 Next.js 서비스로 사용자 유입을 도모 / / 아래 그림은 요청 경로에 따라 CloudFront가 요청을 보내는 원본이 어디인지 표현한 그림이다.</description></item><item><title>타입스크립트에서 함수 타입을 정의할 때 Generic 사용하기</title><link>https://j2e4.github.io/post/define-function-type-with-generic/</link><pubDate>Tue, 21 Mar 2023 23:11:46 +0900</pubDate><guid>https://j2e4.github.io/post/define-function-type-with-generic/</guid><description>Generic은 특정 로직을 하나 이상의 타입에 적용할 수 있게 허용하는 도구로써 좀 더 유연하게 타입을 정의할 수 있게 한다.
Generic 타입에 전달하는 number, string과 같은 구체적인 타입을 Type Argument라 한다.
함수 타입을 정의하는 두 가지 방법을 소개하고 두 방법이 무엇이 다른지 알아본다.
type 키워드에서 Generic 사용하기 함수 타입을 정의할 때 Generic 사용하기 두 방법 모두 type 키워드를 사용해 함수의 파라미터와 리턴 값을 설명하는 함수 타입을 정의하지만, Generic을 사용하는 위치가 다르다.</description></item><item><title>Debounce, 마지막 이벤트만 처리하기</title><link>https://j2e4.github.io/post/debounce/</link><pubDate>Thu, 02 Mar 2023 00:21:36 +0900</pubDate><guid>https://j2e4.github.io/post/debounce/</guid><description>마지막 이벤트가 발생하고 개발자가 지정한 시간 이후에 Callback을 실행하는 이벤트 처리 방식이다.
첫 이벤트가 발생할 때 타이머를 지정, 이후 이벤트가 발생할 때마다 타이머를 갱신한다.
더 이상 이벤트가 발생하지 않아 타이머를 갱신하지 않게 되면, 마지막으로 발생한 이벤트의 타이머가 끝날 때 Callback을 실행한다.
let debounceTimeoutId: number; function handleEventDebounce(ms: number) { if (debounceTimeoutId !== undefined) clearDebounceTimeout(); debounceTimeoutId = setTimeout(() =&amp;gt; { // do something clearDebounceTimeout(); }, ms); } function clearDebounceTimeout() { clearTimeout(debounceTimeoutId); debounceTimeoutId = undefined; } 비교: Throttle 처음 이벤트가 발생하고 개발자가 지정한 시간 이후에 Callback을 실행하는 이벤트 처리 방식이다.</description></item><item><title>최신 버전 Babel로 업데이트하기 in Vue 2</title><link>https://j2e4.github.io/post/update-babel-in-vue-two/</link><pubDate>Thu, 16 Feb 2023 00:21:53 +0900</pubDate><guid>https://j2e4.github.io/post/update-babel-in-vue-two/</guid><description>자바스크립트 문법 중 하나인 옵셔널 체이닝(Optional Chaining)을 프로젝트 코드에서 사용하기 위해 알아보고 진행한 내용을 정리한다.
옵셔널 체이닝만 사용하고자 한다면 공식 문서에서 안내하는 대로 의존성을 추가해줘도 된다. (참고: https://babeljs.io/docs/babel-plugin-proposal-optional-chaining#installation)
하지만 해당 플러그인을 포함하는 바벨 버전으로 업그레이드해 넓은 범위의 해결을 추구하는 것이 좋지 않을까 한다.
Optional Chaining을 지원하는 Babel 버전 옵셔널 체이닝을 지원하는 바벨의 플러그인은 @babel/plugin-proposal-optional-chaining이고 v7.8.0 이상의 @babel/preset-env에서 지원한다.
알아본 바로는 v4.5.19 이상의 vue-cli부터 에러 없이 사용할 수 있다.
Latest 버전 확인하기 Vue 2에서 지원하는 Babel 플러그인의 latest 버전은 5.</description></item></channel></rss>